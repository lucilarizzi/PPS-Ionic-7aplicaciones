import { Component, OnInit } from '@angular/core';
import { Camera, CameraOptions } from '@ionic-native/camera/ngx';
import { Observable, of, from } from 'rxjs';
import { Flashlight } from '@ionic-native/flashlight/ngx';
import { AngularFirestore, AngularFirestoreDocument } from '@angular/fire/firestore';
import { ArchivosFirebaseService } from 'src/app/service/archivos-firebase.service';
import { File } from '@ionic-native/file/ngx';
import { Base64 } from '@ionic-native/base64/ngx';
import { MediaCapture, MediaFile, CaptureError, CaptureImageOptions } from '@ionic-native/media-capture/ngx';
import { FileChooser } from '@ionic-native/file-chooser/ngx';
import { FileOpener } from '@ionic-native/file-opener/ngx';
import { ImagePicker } from '@ionic-native/image-picker/ngx';
import { FileTransfer, FileUploadOptions, FileTransferObject } from '@ionic-native/file-transfer/ngx';
import { AngularFireStorage } from '@angular/fire/storage';


@Component({
  selector: 'app-cosas-lindas',
  templateUrl: './cosas-lindas.page.html',
  styleUrls: ['./cosas-lindas.page.scss'],
})
export class CosasLindasPage implements OnInit {

  currentImage: any;
  mensaje: String;
  misImagenes: Observable<any>;
  misImagenes2: Array<any>;
  mostrarChat: Boolean;
  estadoluz: boolean;
  captureDataUrl: string;
  imagenEnBase64: any;

  image: any = '';
  selectedFiles: any;
  fileName: string;


  public mensajeArchivo = 'No hay un archivo seleccionado';

  public nombreArchivo = '';
  public URLPublica = '';
  public porcentaje = 0;
  public finalizado = false;

  constructor(
    private fbstorage: AngularFireStorage,
    private transfer: FileTransfer,
    private imagePicker: ImagePicker,
    private fileOpener: FileOpener,
    private fileChooser: FileChooser,
    private file: File,
    private base64: Base64,
    private camera: Camera,
    private flashlight: Flashlight,
    private firebaseStorage: ArchivosFirebaseService,
    private mediaCapture: MediaCapture) { }

  ngOnInit() {

    this.camara();
  }




  luz() {
    if (this.estadoluz) {
      this.flashlight.switchOff()
      this.estadoluz = false;
    } else {
      this.flashlight.switchOn()
      this.estadoluz = true;
    }
  }


  async camara() {
    const options: CameraOptions = {
      quality: 80,
      destinationType: this.camera.DestinationType.FILE_URI,
      encodingType: this.camera.EncodingType.JPEG,
      mediaType: this.camera.MediaType.PICTURE
    };

    try {
      let cameraInfo = await this.camera.getPicture(options);
      let blobInfo = await this.makeFileIntoBlob(cameraInfo);
      this.selectedFiles = blobInfo;
      this.cargarDesdeAndroid();

    } catch (e) {
      console.log(e.message);
      alert("File Upload Error " + e.message);
    }
  }

  /**
   * 
   */
 camara2() {

    let options: CaptureImageOptions = { limit: 1 }
    this.mediaCapture.captureImage(options)
      .then( 
        async (data: MediaFile[]) => {        

            console.info(data);
            console.info(data[0]);
            console.log(data[0].fullPath);
            console.log(data[0].name);

            let blobInfo = await this.makeFileIntoBlob(data[0]);
            this.image = data[0].fullPath;

            this.selectedFiles= blobInfo;
            this.cargarDesdeAndroid();
        
        },
        (err: CaptureError) => console.error(err)
      );
  }











  // FILE STUFF
  makeFileIntoBlob(_imagePath) {
    // INSTALL PLUGIN - cordova plugin add cordova-plugin-file
    return new Promise((resolve, reject) => {
      let fileName = "";
      this.file
        .resolveLocalFilesystemUrl(_imagePath)
        .then(fileEntry => {
          let { name, nativeURL } = fileEntry;

          // get the path..
          let path = nativeURL.substring(0, nativeURL.lastIndexOf("/"));
          console.log("path", path);
          console.log("fileName", name);

          fileName = name;
         // we are provided the name, so now read the file into
          // a buffer
          return this.file.readAsArrayBuffer(path, name);
        })
        .then(buffer => {
          // get the buffer and make a blob to be saved
          let imgBlob = new Blob([buffer], {
            type: "image/jpeg", 
          });
          console.log("imgBlob.type, imgBlob.size");

          console.log(imgBlob.type, imgBlob.size);
          resolve({
            fileName,
            imgBlob
          });
        })
        .catch(e => reject(e));
    });
  }

  
  async cargarDesdeAndroid() {

    let archivo = this.selectedFiles;

    var metadata = {
      name:archivo.fileName,
      contentType: 'image/jpeg',
      nuevoMensaje: "lucila",
      fecha: new Date().getDate(),
   };

    console.info(this.selectedFiles)
    var referencia = this.firebaseStorage.referenciaCloudStorage(archivo.fileName);
    referencia.put(archivo.imgBlob, metadata);
    console.info(referencia);

    /*  try {

      let tarea = this.firebaseStorage.tareaCloudStorage("cosaLinda" + archivo.fileName, archivo.imgBlob);

      tarea.percentageChanges().subscribe((porcentaje) => {
        this.porcentaje = Math.round(porcentaje);
        if (this.porcentaje == 100) {
          this.finalizado = true;
        }
      });
      console.info("ereferrencia", referencia)
      await referencia.getDownloadURL().subscribe((URL) => {
        this.URLPublica = URL;

      });
    } catch (e) {
      console.log("e2 " + e);

    } */

  }

  ///////////////////////

  detectFiles(event) {

    this.preview = true;
    this.opcionElegida = 2;

    this.selectedFiles = event;

    this.fileName = event.target.files[0].name;
    this.image =this.file.dataDirectory + "/"+event.target.files[0].name;

    console.info('selectedFiles: ' , event.target.files);
    console.info('event ', event);

    this.stats = false;
    this.botonera = false;
    this.galeria = false;

    var reader = new FileReader();
    reader.readAsDataURL(event.target.files[0]);
    reader.onload = (_event) => {
     
      console.info("reader" , reader);
      console.info("event2", _event);   

    }    


    
  }